{"name":"Bounty DB","tagline":"Advanced fault tolerant key-value store written in Erlang","body":"Bounty DB is very fast and clean, it implements [Bloom filter](http://en.wikipedia.org/wiki/Bloom_filterâ€Ž) to reduce disk lookups for non-existent keys.\r\n\r\n###Setup Bounty in 3 simple steps###\r\n1. Run <code>make</code> inside the directory that contains cloned repo\r\n2. Open <code>main.config</code>, set the server port and path to db file\r\n3. Start server with <code>config=main ./start</code> command. However, you can make your config file and specify its filename to the <code>config</code> param.\r\n\r\nYou can always check status of the server with <code>./status</code> command, and stop the server by <code>./stop</code>\r\n\r\n###API###\r\nBounty DB provides simple HTTP REST API.\r\n\r\n####Get value####\r\n\r\n    GET /store/{key}\r\n\r\nYou can append parameter <code>default={defaultValue}</code> to the request. This default value will return if there's no stored value for specified key in the database\r\n\r\nAnswer:\r\n\r\n    {\r\n        \"status\": \"ok\",\r\n        \"value\": {value}\r\n    }\r\nWhen no value:\r\n\r\n    {\r\n        \"status\": \"error\"\r\n    }\r\n\r\n####Save value####\r\n\r\n    PUT /store/{key}\r\n\r\nRequest body must be JSON string.  \r\nExample, set value:\r\n\r\n    {\r\n        \"value\": \"myValue\"\r\n    }\r\n\r\nExample, set value with a *one minute timeout* on key (after this timeout has expired, the key will automatically deleted):\r\n\r\n    {\r\n        \"value\": \"myValue\",\r\n        \"timeout\": 60\r\n    }\r\n\r\n\r\nAnswer:\r\n\r\n    {\r\n        \"status\": \"ok\"\r\n    }\r\n\r\n\r\n####Delete value####\r\n\r\n    DELETE /store/{key}\r\n\r\nAnswer:\r\n\r\n    {\r\n        \"status\": \"ok\"\r\n    }\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}